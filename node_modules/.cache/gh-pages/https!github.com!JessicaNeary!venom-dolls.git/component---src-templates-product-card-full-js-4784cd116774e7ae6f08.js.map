{"version":3,"file":"component---src-templates-product-card-full-js-4784cd116774e7ae6f08.js","mappings":"qLAyFA,UA/EwB,SAAC,GAAqC,IAAD,IAAlCA,KAAOC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,OACrCC,GAAUC,EAAAA,EAAAA,QAAO,MACvB,GAAmCC,EAAAA,EAAAA,UAASH,EAAOI,MAAM,GAAGC,MAApDC,EAAR,KAAsBC,EAAtB,KACA,GAA0CJ,EAAAA,EAAAA,WAAS,GAA1BK,GAAzB,WACA,GAA0BL,EAAAA,EAAAA,UAAS,MAA3BM,EAAR,KACMC,GADN,MACiBC,EAAAA,EAAAA,OAEXC,EAAyC,cAA7Bb,EAAYc,QAAQC,KAmBtC,OACA,gBAAC,IAAD,CAAQC,KAAK,UACX,uBAAKC,UAAU,4CACb,uBAAKA,UAAU,kCACb,gBAAC,EAAAC,EAAD,CAAaC,IAAKZ,EAAaQ,KAAMK,MAAOb,EAAac,gBAAgBC,mBAE3E,uBAAKL,UAAU,kDACXhB,EAAOI,MAAMkB,KAAI,gBAAGjB,EAAH,EAAGA,KAAH,OACjBA,EAAKS,OAASR,EAAaQ,MAC3B,gBAAC,EAAAG,EAAD,CAAaD,UAAU,OAAOO,IAAKlB,EAAKS,KAAMI,IAAKb,EAAKS,KAAMK,MAAOd,EAAKe,gBAAgBC,gBAAiBG,QAAS,kBAAMjB,EAASF,UAGvI,uBAAKW,UAAU,mBACb,sBAAIA,UAAU,+BAA+BjB,EAAYc,QAAQC,MACjE,sBAAIE,UAAU,qBAAoBS,EAAAA,EAAAA,GAAY1B,EAAY2B,YAAa3B,EAAY4B,WACnF,sBAAIX,UAAU,kBAAkBjB,EAAYc,QAAQe,aAEpD,0BAAQZ,UAAU,4CAA4CQ,QAlClD,YACVZ,GAAaH,GACjBC,GAASmB,EAAAA,EAAAA,IAAU,CACjBC,GAAI/B,EAAY+B,GAChBhB,KAAMf,EAAYc,QAAQC,KAC1BiB,MAAOhC,EAAY2B,YACnBP,MAAOnB,EAAOI,MAAM,GAAGC,KACvBsB,SAAU5B,EAAY4B,SACtBlB,KAAMA,KAERC,GAASsB,EAAAA,EAAAA,QACCpB,IAAcH,IACxBR,EAAQgC,QAAQC,QAChB1B,GAAa,MAqBX","sources":["webpack://venom-dolls/./src/templates/ProductCardFull.js"],"sourcesContent":["import React, { useState, useRef } from \"react\"\nimport { graphql } from \"gatsby\"\nimport { useDispatch } from \"react-redux\";\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\nimport formatPrice from \"../utils/formatPrice\";\nimport Layout from \"../components/Layout\"\n\nimport { toggleCartOpen, addToCart } from \"../actions\";\n\nconst ProductCardFull = ({ data: {stripePrice, images} }) => {\n    const sizeRef = useRef(null);\n    const [ focusedImage, setFocus ] = useState(images.edges[0].node);\n    const [ highlightSizing, setHighlight ] = useState(false);\n    const [ size, setSize ] = useState(null);\n    const dispatch = useDispatch();\n\n    const needsSize = stripePrice.product.name !== \"Face Mask\";\n    \n    const handleBuy = () => {\n      if ( !needsSize || size ) {\n        dispatch(addToCart({          \n          id: stripePrice.id,\n          name: stripePrice.product.name,\n          price: stripePrice.unit_amount,\n          image: images.edges[0].node,\n          currency: stripePrice.currency,\n          size: size\n        }))\n        dispatch(toggleCartOpen());\n      } else if ( needsSize && !size ) {\n        sizeRef.current.focus();\n        setHighlight(true);\n      }\n    }\n\n    return (\n    <Layout path=\"/merch\">\n      <div className=\"row justify-content-center p-3 text-dark\">\n        <div className=\"col-12 col-md-10 col-lg-6 mb-4\">\n          <GatsbyImage alt={focusedImage.name} image={focusedImage.childImageSharp.gatsbyImageData} />\n        </div>\n        <div className=\"d-none d-lg-block d-md-block col-lg-1 col-md-2\">\n          { images.edges.map(({ node }) => (\n            node.name !== focusedImage.name &&\n            <GatsbyImage className=\"mb-3\" key={node.name} alt={node.name} image={node.childImageSharp.gatsbyImageData} onClick={() => setFocus(node)} />\n          ))}\n        </div>\n        <div className=\"col-12 col-lg-5\">\n          <h2 className=\"text-uppercase mt-2 fw-bold\">{stripePrice.product.name}</h2>\n          <h4 className=\"text-danger mt-2\">{formatPrice(stripePrice.unit_amount, stripePrice.currency)}</h4>\n          <h5 className=\"fw-normal mt-4\">{stripePrice.product.description}</h5>\n          \n          <button className=\"buy-btn w-100 mt-2 p-1 btn-dark rounded-0\" onClick={handleBuy}>BUY NOW</button>\n        </div>\n    </div>\n    </Layout>\n)}\n\nexport const query = graphql`\nquery($productId: String, $imageLocation: String) {\n    stripePrice(id: {eq: $productId}) {\n        id\n        currency\n        unit_amount\n        product {\n        id\n        images\n        description\n        name\n        }\n    }\n    images: allFile(\n      filter: {relativeDirectory: {eq: $imageLocation}}\n      sort: {fields: relativePath}\n    ) {\n        edges {\n          node {\n            relativePath\n            name\n            childImageSharp {\n              gatsbyImageData(layout: CONSTRAINED, placeholder: BLURRED)\n            }\n          }\n        }\n      }\n}\n`\n\nexport default ProductCardFull;"],"names":["data","stripePrice","images","sizeRef","useRef","useState","edges","node","focusedImage","setFocus","setHighlight","size","dispatch","useDispatch","needsSize","product","name","path","className","G","alt","image","childImageSharp","gatsbyImageData","map","key","onClick","formatPrice","unit_amount","currency","description","addToCart","id","price","toggleCartOpen","current","focus"],"sourceRoot":""}